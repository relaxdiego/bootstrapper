#!/bin/bash

check_vault_file(){
    local vault_file_abspath=$1

    # Lets build the image. If none of the dependencies have changed since
    # the last build, this will just output "Nothing to be done for ansible"
    make ansible

    if [ -f $vaultfile_abspath ]; then
        # Attempt to decrypt the vaultfile to check if the vault password
        # file is the correct one that we have locally.
        decrypt_vaultfile
        encrypt_vaultfile
        echo -e "${green}Vault file is readable${normal}"
    else
        create_vaultfile
    fi
}

create_vaultfile(){
    echo -e "${yellow}Initializing vault:${normal} ${vaultfile_abspath}"
    echo "---" > $vaultfile_abspath

    set_x

    docker run \
        -it \
        --rm \
        --mount type=bind,source=${vault_password_file_abspath},target=${container_vault_password_file_abspath},readonly \
        --mount type=bind,source=$(dirname $vaultfile_abspath),target=$(dirname $container_vaultfile_abspath) \
        --env host_vault_file_abspath=$vaultfile_abspath \
        --env vault_file_abspath=$container_vaultfile_abspath \
        --entrypoint='ansible-vault' \
        "${ansible_image_name}" \
        encrypt \
        --vault-password-file=${container_vault_password_file_abspath} \
        $container_vaultfile_abspath

    unset_x
}

edit_vaultfile(){
    set_x

     docker run \
        -it \
        --rm \
        --mount type=bind,source=$(dirname $vaultfile_abspath),target=$(dirname $container_vaultfile_abspath) \
        --mount type=bind,source=${vault_password_file_abspath},target=${container_vault_password_file_abspath} \
        --entrypoint=ansible-vault \
        "${ansible_image_name}" \
        edit \
        --vault-password-file=${container_vault_password_file_abspath} \
        $container_vaultfile_abspath

     unset_x
}

encrypt_vaultfile(){
    set_x

     docker run \
        -it \
        --rm \
        --mount type=bind,source=$(dirname $vaultfile_abspath),target=$(dirname $container_vaultfile_abspath) \
        --mount type=bind,source=${vault_password_file_abspath},target=${container_vault_password_file_abspath} \
        --entrypoint=ansible-vault \
        "${ansible_image_name}" \
        encrypt \
        --vault-password-file=${container_vault_password_file_abspath} \
        $container_vaultfile_abspath &>/dev/null

     unset_x
}

decrypt_vaultfile(){
    set_x

    if ! docker run \
            -it \
            --rm \
            --mount type=bind,source=$(dirname $vaultfile_abspath),target=$(dirname $container_vaultfile_abspath) \
            --mount type=bind,source=${vault_password_file_abspath},target=${container_vault_password_file_abspath} \
            --entrypoint=ansible-vault \
            "${ansible_image_name}" \
            decrypt \
            --vault-password-file=${container_vault_password_file_abspath} \
            $container_vaultfile_abspath \
         &>/dev/null; then
        echo -e "${red}ERROR:${normal} Unable to decrypt the vault. Was this encrypted with a different password?"
        exit 1
    fi

    unset_x
}

check_vault_password_file(){
    # Lets build the image. If none of the dependencies have changed since
    # the last build, this will just output "Nothing to be done for op"
    make op

    prep_password_file_dir $vault_password_file_abspath

    set_x

    docker run \
        -it \
        --rm \
        --mount type=bind,source=$(dirname $vault_password_file_abspath),target=$(dirname $container_vault_password_file_abspath) \
        --mount type=bind,source=$HOME/.op,target=/root/.op \
        --env host_vault_password_file_abspath=$vault_password_file_abspath \
        --env vault_password_file_abspath=$container_vault_password_file_abspath \
        --env cluster_id=$cluster_id \
        --entrypoint=/bin/op-entrypoint \
        "${op_image_name}"

    # Quiet down those noisy commands and get off my lawn!
    { set +x; } 2>/dev/null
}

get_abspath(){
    local relpath=$1
    local abspath

    if [ -d "$relpath" ]; then
        cd "$relpath" && abspath=$(pwd) && cd - > /dev/null
    fi

    echo "$abspath"
    return 0
}

get_cluster_id(){
    local vars_file=$1
    set -eo pipefail
    grep "cluster_id:" $vars_file | sed "s/cluster_id: *//g"
    return 0
}

get_vault_password_file_abspath(){
    local cluster_id=$1
    echo $HOME/.bootstrapper-ansible/${cluster_id}/vault-password
    return 0
}

prep_password_file_dir(){
    mkdir -p $(dirname $1)
}

set_x(){
    if [ "$debug_mode" == "t" ]; then
        set -x
    fi
}

unset_x(){
    # Quiet down those noisy commands and get off my lawn!
    { set +x; } 2>/dev/null
}
