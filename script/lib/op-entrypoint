#!/bin/bash

set -eu

source /bin/colors

entrypoint(){
    local choice=0
    local vault_obj

    if [ -f "$vault_password_file_abspath" ]; then
        echo -e "${green}Vault password file found at $host_vault_password_file_abspath.${normal}"
    else
        echo -e "${red}ERROR:${normal} Vault password file not found at $host_vault_password_file_abspath."
        for (( ; ; )); do
            echo -e "${yellow}What would you like to do:${normal}"
            echo
            echo "  1) Create password file and upload to 1Password"
            echo "  2) Download password file from 1Password"
            echo
            echo -e "Your choice? (1 or 2): \c"
            read choice

            if [ "$choice" = "1" ]; then
                create_password_file
                break 1
            elif [ "$choice" = "2" ]; then
                get_password_file
                break 1
            else
                echo
                echo -e "${red}Invalid choice${normal}"
                echo
            fi
        done
    fi
}

create_password_file(){
    local vault_choice=0

    echo -e "${green}Initializing vault password file at ${host_vault_password_file_abspath}${normal}"
    vault_password=$(uuidgen)
    echo "$vault_password" > $vault_password_file_abspath

    echo -e "${yellow}Uploading vault password to 1Password."

    login_to_1password

    local vaults_json=$(op list vaults)
    local max_choice=$(echo $vaults_json | jq -r '. | length')

    echo -e "${yellow}Please pick a vault to upload the password file to. Make sure it's a vault that your teammates also have access to.${normal}"

    for (( ; ; )); do
        echo $vaults_json | jq -r '[keys, map(.name)] | transpose | [[.[][0]+1 | tostring], [.[][1]]] | transpose | .[] | join(") ")'
        echo -e "Pick a number (1 to $max_choice): \c"
        read vault_choice
        if [ "$vault_choice" -lt 1 ] || [ "$vault_choice" -gt $max_choice ]; then
            echo
            echo -e "${red}Invalid choice${normal}"
            echo
        else
            vault_obj=$(echo $vaults_json | jq -rc .[$vault_choice-1])
            upload_1password_document $vault_obj
            break 1
        fi
    done
}

download_1password_document(){
    local vault_obj=$1
    local vault_uuid=$(echo $vault_obj | jq -r .uuid)
    local vault_name=$(echo $vault_obj | jq -r .name)
    local document_name="ansible_vault_password_$cluster_id"
    local all_docs=$(op list documents --vault=$vault_uuid)
    local candidates=$(echo $all_docs | jq -rc --arg TITLE $document_name '[.[] | select(.overview.title==$TITLE) | select(.trashed == "N")]')
    local num_candidates=$(echo $candidates | jq length)
    local document_uuid=""

    if [ $num_candidates -gt 1 ]; then
        echo -e "${yellow}IMPLEMENT ME! (Found more than one document named $document_name)${normal}"
        exit 1
    elif [ $num_candidates -lt 1 ]; then
        echo -e "${red}ERROR: Could not find $document_name in vault $vault_name${normal}"
        exit 1
    else
        document_uuid=$(echo $candidates | jq -rc '.[0].uuid')
    fi

    echo -e "${yellow}Downloading $document_name (UUID: $document_uuid) from vault '$vault_name' to $host_vault_password_file_abspath${normal}"
    op get document $document_uuid --vault=$vault_uuid > $vault_password_file_abspath
}

get_password_file(){
    login_to_1password

    local vaults_json=$(op list vaults)
    local max_choice=$(echo $vaults_json | jq -r '. | length')

    echo "Please pick a vault to download the password file from."

    for (( ; ; )); do
        echo $vaults_json | jq -r '[keys, map(.name)] | transpose | [[.[][0]+1 | tostring], [.[][1]]] | transpose | .[] | join(") ")'
        echo -e "Pick a number (1 to $max_choice): \c"
        read vault_choice
        if [ "$vault_choice" -lt 1 ] || [ "$vault_choice" -gt $max_choice ]; then
            echo
            echo -e "${red}Invalid choice${normal}"
            echo
        else
            vault_obj=$(echo $vaults_json | jq -rc .[$vault_choice-1])
            download_1password_document $vault_obj
            break 1
        fi
    done
}

login_to_1password(){
    if op list vaults &>/dev/null; then
        echo -e "${green}Already logged in to 1Password"
        return 0
    fi

    echo -e "${yellow}Please log in to 1Password${normal}"

    for (( ; ; )); do
        echo -e "Enter 1password subdomain (e.g. xxx.1password.com): \c"
        read op_subdomain

        echo -e "Enter 1password email: \c"
        read op_email

        if grep $op_subdomain ~/.op/config 1>/dev/null; then
            eval $(op signin $op_subdomain)
        else
            eval $(op signin $op_subdomain $op_email)
        fi

        if op list vaults &>/dev/null; then
            echo -e "${green}Logged in succesfully to $op_subdomain.${normal}"
            break
        else
            echo -e "${red}Login failed. Please try again.${normal}"
        fi
    done
}

upload_1password_document(){
    local vault_obj=$1
    local vault_uuid=$(echo $vault_obj | jq -r .uuid)
    local vault_name=$(echo $vault_obj | jq -r .name)

    echo -e "${yellow}Uploading to $host_vault_password_file_abspath to vault '$vault_name' (UUID: $vault_uuid)${normal}"
    op create document \
        $vault_password_file_abspath \
        --title=ansible_vault_password_$cluster_id \
        --vault=$vault_uuid | jq .uuid
}

entrypoint
